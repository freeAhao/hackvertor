package burp.ui;

import burp.Hackvertor;
import burp.JTabbedPaneClosable;
import burp.Utils;
import burp.tag.Tag;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.HashMap;

public class ExtensionPanel {

    private int tabCounter = 1;

    private JPanel rootPanel;
    private JTabbedPaneClosable tabbedPanel;
    private Hackvertor hackvertor;
    private HashMap<Integer, HackvertorPanel> hackvertorPanelHashMap = new HashMap();

    public ExtensionPanel(Hackvertor hackvertor) {
        this.hackvertor = hackvertor;
        $$$setupUI$$$();
        setupUI();
        tabbedPanel.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (tabbedPanel.getSelectedIndex() == -1) {
                    return;
                }
                if (tabbedPanel.clickedDelete) {
                    tabbedPanel.clickedDelete = false;
                    if (tabbedPanel.getTabCount() > 1) {
                        if (tabbedPanel.getSelectedIndex() == tabbedPanel.getTabCount() - 1) {
                            tabbedPanel.setSelectedIndex(tabbedPanel.getTabCount() - 2);
                        }
                        return;
                    }
                }
                if (tabbedPanel.getTitleAt(tabbedPanel.getSelectedIndex()).equals("...")) {
                    tabCounter++;
                    tabbedPanel.remove(tabbedPanel.getSelectedIndex());
                    HackvertorPanel hackvertorPanel = new HackvertorPanel(hackvertor);
                    tabbedPanel.addTab(tabCounter + "", hackvertorPanel.$$$getRootComponent$$$());
                    tabbedPanel.addTab("...", new JPanel());
                    tabbedPanel.setSelectedIndex(tabbedPanel.getTabCount() - 2);
                }
            }
        });
    }

    private void setupUI() {
        ComponentAdapter componentAdapter = new ComponentAdapter() {
            @Override
            public void componentShown(ComponentEvent e) {
                if (tabbedPanel.getSelectedIndex() == -1) {
                    return;
                }
                HackvertorPanel selectedPanel = (HackvertorPanel) tabbedPanel.getComponentAt(tabbedPanel.getSelectedIndex());
                selectedPanel.readClipboardAndDecode();
            }
        };
        tabbedPanel.addComponentListener(componentAdapter);

        addNewPanel();
        tabbedPanel.addTab("...", new Panel());
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPanel = new JTabbedPaneClosable();
        rootPanel.add(tabbedPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    private void createUIComponents() {
    }

    public void refresh() {
        hackvertorPanelHashMap.entrySet().forEach((integerHackvertorPanelEntry -> {
            HackvertorPanel value = integerHackvertorPanelEntry.getValue();
            JTabbedPane tabs = value.getTabs();
            int tabIndex = tabs.getSelectedIndex();
            String text = tabs.getTitleAt(tabIndex);
            if (text.equals("Custom")) {
                tabs.setComponentAt(tabIndex, Utils.createButtons(hackvertor.getTags(), value.getInputArea(), Tag.Category.Custom, null, false));
            }
        }));
    }

    public HackvertorPanel addNewPanel() {
        HackvertorPanel panel = new HackvertorPanel(hackvertor);
        int index = tabbedPanel.getTabCount() == 0 ? 0 : tabbedPanel.getTabCount() - 1;
        tabbedPanel.insertTab(String.valueOf(tabCounter), null, panel.$$$getRootComponent$$$(), null, index);

        hackvertorPanelHashMap.put(tabCounter, panel);

        int selectIndex = tabbedPanel.getTabCount() <= 1 ? 0 : tabbedPanel.getTabCount() - 2;
        if (!(tabbedPanel.getTabCount() <= 1)) {
            tabCounter++;
        }
        tabbedPanel.setSelectedIndex(selectIndex);
        return panel;
    }

    public void makeActiveBurpTab() {
        JComponent c = rootPanel;
        while (!(c instanceof JTabbedPane)) {
            c = (JComponent) c.getParent();
        }
        JTabbedPane tabbedPane = (JTabbedPane) c;
        tabbedPane.setSelectedComponent(this.rootPanel);
    }
}
